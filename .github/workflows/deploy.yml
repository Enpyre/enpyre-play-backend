name: Production Workflow

on: push

env:
  PYTHON_VERSION: '3.10.7'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: /opt/hostedtoolcache/Python/${{ env.PYTHON_VERSION }}/x64/
          key: python${{ env.PYTHON_VERSION }}-os-${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
      - name: Install Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create false
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi -vvv
      - name: Cache pre commit hooks
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ runner.os }}-pre-commit-${{ hashFiles('.pre-commit-config.yaml') }}-${{ hashFiles('.github/workflows/deploy_production.yml') }}
      - name: Cache mypy types
        uses: actions/cache@v3
        with:
          path: .mypy_cache
          key: ${{ runner.os }}-mypy-${{ hashFiles('.pre-commit-config.yaml') }}-${{ hashFiles('mypy.ini') }}
      - name: Lint
        run: make pc-run-all
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: enpyre
          POSTGRES_PASSWORD: enpyre
          POSTGRES_DB: enpyre_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: /opt/hostedtoolcache/Python/${{ env.PYTHON_VERSION }}/x64/
          key: python${{ env.PYTHON_VERSION }}-os-${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
      - name: Install Poetry
        run: |
          pip install poetry
          poetry config virtualenvs.create false
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi -vvv
      - name: Tests
        env:
          DOPPLER_TOKEN: ${{ secrets.DOPPLER_TOKEN_TESTS }}
        run: |
          echo Installing Doppler
          (curl -Ls https://cli.doppler.com/install.sh || wget -qO- https://cli.doppler.com/install.sh) | sudo bash
          echo Doppler Installed
          echo Running Tests
          doppler run -- pytest --cov --cov-report xml:coverage.xml
      - name: Upload coverage to the next step
        uses: actions/upload-artifact@v3
        with:
          name: coverage-${{ github.run_id }}
          path: coverage.xml
  sonar:
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Download coverage
        if: inputs.coverage == 'true'
        uses: actions/download-artifact@v3
        with:
          name: coverage-${{ github.run_id }}
          path: .
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  build_and_push:
    runs-on: ubuntu-latest
    needs: [lint, tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      ## Configurando as credenciais AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      ## Fazendo login no AWS ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      ## Fazendo build da imagem da aplicação e armazenando no ECR
      - name: Build and push image to Amazon ECR
        id: build_image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ secrets.IMAGE_TAG }}
        shell: bash
        run: |
          docker build --build-arg ENVIRONMENT=production -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Configurando as credenciais AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Force redeploy of the service
      - name: Force deployment
        run: |
          aws ecs update-service --cluster ${{ secrets.ECS_CLUSTER }} --service ${{ secrets.ECS_SERVICE }} --force-new-deployment
          aws ecs wait services-stable --cluster ${{ secrets.ECS_CLUSTER }} --services ${{ secrets.ECS_SERVICE }}
